---
layout: post
title: Troubles shouting
prev: tunning.textile
---

<div class="page-header">
  <h1>Troubles shouting <small>Debugging generated code.</small></h1>
</div>

This lesson covers:

* "Pre-requisites":#pre-requisites
* "Configure your IDE":#configuration
* "Security Exception for Eclipse jar signing":#security-exception
* "Generate Source and/or Class Files":#setup-mapping-factory

h3(#pre-requisites). Pre-requisites

If you're not getting the expected results out of Orika (or you want to contribute a fix or feature), you may wish to download the source and step through the mapping process to see the details.

To enable step-through debugging into the generated objects (which Orika is building at run-time), you'll need to include the orika-eclipse-tools module in your project, like so:

<pre class="prettyprint">
<dependency>
   <groupId>ma.glasnost.orika</groupId>
   <artifactId>orika-eclipse-tools</artifactId>
   <version>1.2.1</version><!-- please verify the latest version -->
</dependency> 
</pre>

In addition, you'll also need to tell Orika you want to use Eclipse Jdt as the compiler strategy; there are 2 ways to do this, listed in order of precedence:

Use the <code>DefaultMapperFactory.Builder</code>

<pre class="prettyprint">
MapperFactory factory = 
        new DefaultMapperFactory.Builder()
                .compilerStrategy(new EclipseJdtCompilerStrategy())
                .build();
// add mappers, hints, converters, etc...     
Set the system property
// Maybe more convenient, but sets at a global level...
System.setProperty(OrikaSystemProperties.COMPILER_STRATEGY,EclipseJdtCompilerStrategy.class.getName());
</pre>

h3(#pre-requisites). Pre-requisites Edit Source Lookup Path.

If you're using Eclipse as your IDE, you may initially receive the "Source not found" window with a button labeled "Edit Source Lookup Path..." while trying to (debug) step into the source of a generated object. When you click this button, you'll need to add the location of the compiler output folder for your project as a File System Folder (not a Workspace Folder). This is due to the fact that source files will not actually exist until just before you're at the break-point and Eclipse will have a "stale" view of the workspace folder by that time.

If you're using an IDE other than Eclipse, the procedure should be similar. Note that although Orika is leveraging the Eclipse Jdt to format and compile the code, it resolves these from it's own dependencies, so if using Maven, there should be few differences.

If your project follows the Maven folder structure, this folder would be the target/test-classes folder by default. Check your project configuration build path to see the target location if you're unsure.

If not using Maven, you'll need to make sure the following Eclipse Jdt artifacts are added to the build path:


<table class="table table-bordered table-striped">
	
<thead>
	<tr><th>jdt artifact</th><th>version</th></tr>
</thead>
<tr><td>core</td><td>3.5.2</td></tr>
<tr><td>text</td><td>3.3.0</td></tr>
<tr><td>commands</td><td>3.3.0</td></tr>
<tr><td>runtime</td><td>3.3.100</td></tr>
<tr><td>osgi</td><td>3.3.0</td></tr>
<tr><td>common</td><td>3.3.0</td></tr>
<tr><td>jobs</td><td>3.3.0</td></tr>
<tr><td>registry</td><td>3.3.0</td></tr>
<tr><td>preferences</td><td>3.2.100</td></tr>
<tr><td>contenttype</td><td>3.2.100</td></tr>
</table>

Will other versions work (such as the latest from your own Eclipse IDE)? Probably...but we haven't confirmed this yet

h3(#security-exception). Security Exception for Eclipse jar signing

If you receive an exception like <code>org.eclipse.core.runtime.ListenerList?</code> singing information doesn't match..., try moving the eclipse binaries to the front of the classpath; if you're using maven, just move the <code>orika-eclipse-tools</code> dependency before <code>orika-core</code> and you're done.


h3(#pre-requisites). Generate Source and/or Class Files.

When using Javassist (the default) as the compiler strategy, Orika will not generate source or class files by default. When using Eclipse Jdt, Orika will generate source but not class files by default.

This behavior can be customized by setting some special system properties, like so:

<pre class="prettyprint enumlist">
// Write out source files to (classpath:)/ma/glasnost/orika/generated/
System.setProperty(OrikaSystemProperties.WRITE_SOURCE_FILES,"true");

// Write out class files to (classpath:)/ma/glasnost/orika/generated/
System.setProperty(OrikaSystemProperties.WRITE_CLASS_FILES,"true");
</pre>

Note that when using Javassist, the debug info is not being generated so you can look at the code, but you normally can't step into it during a debug session.

You may also need to apply the auto-formatting feature of your favorite IDE to the Javassist strategy source as we're not really shooting for style points on these (normally in-memory only) classes.

The Eclipse strategy generated files includes auto-formatting of the source and includes debug info so that you can step into the code during a debug session (as mentioned in the section above).

